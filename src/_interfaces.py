"""# Interfaces Module

Data structurues & functional interfaces common accross the package. This module is not intended to be used directly by the user.
"""


from dataclasses import dataclass, field
from typing import Any, Callable

@dataclass
class ChatMessage:
  """A message in a chat conversation"""
  content: str
  """The Content of the message"""
  role: str
  """The role of the speaker: One of 'system', 'user' or 'assistant'"""
  model: str | None
  """The model used to generate the message; if None, then the message was not generated by an LLM"""
  metadata: dict[str, Any] = field(default_factory=dict)
  """Arbitrary metadata associated with the message"""

@dataclass
class LLM:
  """Interface for a Large Language Model"""
  name: str
  """The Unique name of the Model being used"""
  context_window: int
  """The size of the model's context window (prompt + response must be fit within this size)"""

  async def calculate_tokens(self, *messages: ChatMessage) -> int:
    """Calculate the total number of tokens in a list of messages"""
    raise NotImplementedError()

  async def chat(self, messages: list[ChatMessage]) -> ChatMessage:
    """Chat with the LLM"""
    raise NotImplementedError()
  